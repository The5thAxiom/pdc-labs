<style>
</style>


# 20220726

## Seeing Processor information

### `lscpu`
- bash command:
    ```bash
	    lscpu
    ```
- Cache:
    - L1i: for instructions
    - L1d: for data

### hwloc
- Install `hwloc` using apt/dnf/whatever: `sudo apt install hwloc`
- Type `lstopo` in bash to open the GUI
- NUMA: Non-Uniform Memory Access


## Multithreading
- Different ways:
    - pthreads
    - Java threads
    - openMP
    
### Processes
- Processes are heavyweight, threads are lightweight
- Seeing running proccesses:
    - `ps -eaf` to see all running procces
    - `cd /proc/PID` (get any PID) to go to the process's directory
    - use `ls` to list all the process information

### pthreads
- Only in POSIX compliant systems (not in Windows)
- use `man pthread_create` to see the arguments needed to create a pthread (in C)
- use `man pthreads` to see the man page
- pthreads example:
  - Copy the example code from the man page for `pthread_create`
  - Compile it using `gcc filename -lpthread` and give the program some words as command line arguments: `./a.out hello how are you`. You will see the output as given in the manpage.

<hr/>

# 20220802
- Why not to use pthreads:
  - difficult to use
  - only works on POSIX
- so, we will use openMP
- about OpenMP:
  - a C-extension API
  - stands for Open MultiProcessing
  - for multithreaded, shared memory parallelism
  - you can convert serial code into parallel code using openMP by including the openMP library: `#include<omp.h>`
  - works mostly using preprocessor (or compiler?) directives:
    ```c
    #include <omp.h>
    #pragma omp parallel private
    ```
  - by default, omp will create threads equal to the number of processors (4 on quad-core machines, 8 on octa-core, etc.)
  - omp has around 35 directives, 44 runtime library routines and around 13 enviroment variables
  - question:
    - case 1: 1000 threads using runtime lib routines (what sir did, giving 100 as an argument to the function (which didn't work)) ([possible solution](https://www.ibm.com/docs/en/xl-fortran-aix/15.1.2?topic=openmp-omp-set-num-threadsnumber-threads-expr#ompsetnumthreads))
    - case 2: 1000 threads using compiler directives ([possible solution](https://www.comrevo.com/2016/01/how-to-create-threads-using-openmp-api.html)):
        ```c
        #pragma omp parallel num_threads(7)
        {
            printf("Hello World");
        } 
        ```
    - case 3: 1000 threads using environment variables (done?) ([this?](https://github.com/LLNL/HPC-Tutorials/blob/main/openmp/code_examples/C/omp_hello.c))
  - open mp can do both low(mutex) and high level synchronization
  - vector multiplication of 2 arrays and measure the time (for 100 and 10k threads)
# 20220809